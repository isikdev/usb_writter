import os
import random
import math
import glob
import hashlib
from typing import List
from crypto.wrappers.logging import logging
from crypto.constants import Msg, Def_val

class ContainerSplitter:
    def __init__(self, seed: str = None, min_chunk_ratio: float = Def_val.min_chunk_ratio):
        self.seed = seed
        self.min_chunk_ratio = min_chunk_ratio
        self._original_seed_state = random.getstate() if seed else None
        if seed:
            random.seed(seed)

    def _generate_random_extension(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Å—Ç–µ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        extensions = ['jpg']  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: ['jpg', 'png', 'mp4', 'mov', 'pdf', 'doc']
        return random.choice(extensions)

    def _generate_chunk_name(self, base_path: str, index: int, subindex: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed"""
        if not self.seed:
            return base_path
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ random
        original_state = random.getstate()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ–Ω–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed-based —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        random.seed(f"{self.seed}-{index}-{subindex}")
        random_chars = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=4))
        extension = self._generate_random_extension()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ random
        random.setstate(original_state)
        
        return f"{self.seed}-{index}-{subindex}-{random_chars}.{extension}"

    def _get_random_chunk_size(self, max_size: int, piece_size: int, chunk_index: int) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—É—Å–∫–∞ –º–µ–∂–¥—É min_ratio –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º piece_size"""
        if self.seed:
            chunk_seed = f"{self.seed}-{piece_size}-{chunk_index}"
            random.seed(chunk_seed)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ piece_size, –∞ –Ω–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–∞–∑–º–µ—Ä–∞
        min_size = int(piece_size * self.min_chunk_ratio)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Ç–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É min_size –∏ max_size
        ratio = random.betavariate(0.8, 0.8)
        size = min_size + int((max_size - min_size) * ratio)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –¥–∂–∏—Ç—Ç–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        jitter = random.uniform(1.0, 1.05)  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–∂–∏—Ç—Ç–µ—Ä
        size = int(size * jitter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, —É–±–µ–∂–¥–∞—è—Å—å, —á—Ç–æ –Ω–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ min_size
        prime_offset = random.choice([0, 311, 733])  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è
        size = min(max_size, size + prime_offset)
        
        if self.seed:
            random.setstate(self._original_seed_state)
        
        return size

    def _split_file(self, file_path: str, index: int, piece_size: int) -> List[str]:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –∫—É—Å–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed-based —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏"""
        logging.info(f"üîµ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ {file_path} (–∏–Ω–¥–µ–∫—Å {index})")
        logging.debug(f"–ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - piece_size: {piece_size}, seed: {self.seed}")
        
        if not os.path.exists(file_path):
            logging.error(f"üö® –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return []
            
        file_size = os.path.getsize(file_path)
        logging.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        directory = os.path.dirname(file_path)
        chunks = []
        
        logging.debug(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size}, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        
        estimated_total_chunks = max(1, math.ceil(file_size / (piece_size * self.min_chunk_ratio)))
        logging.info(f"üìà –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤: {estimated_total_chunks} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—É—Å–∫–∞ {piece_size} –±–∞–π—Ç")
        
        with open(file_path, 'rb') as f:
            position = 0
            chunk_index = 0
            
            while position < file_size:
                remaining = file_size - position
                max_possible = min(piece_size, remaining)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—É—Å–∫–∞
                chunk_size = self._get_random_chunk_size(
                    max_size=max_possible,
                    piece_size=piece_size,
                    chunk_index=chunk_index + index * 1000
                )
                logging.debug(f"üî¢üî¢ –†–∞–∑–º–µ—Ä –∫—É—Å–∫–∞ {chunk_index + 1}: {chunk_size} –±–∞–π—Ç")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã
                chunk_size = min(chunk_size, remaining)
                chunk_data = f.read(chunk_size)
                
                chunk_name = self._generate_chunk_name(file_path, index, chunk_index)
                chunk_path = os.path.join(directory, chunk_name)
                logging.debug(f"–ó–∞–ø–∏—Å—å –∫—É—Å–∫–∞ –≤: {chunk_path}")
                
                with open(chunk_path, 'wb') as chunk_file:
                    chunk_file.write(chunk_data)
                    logging.debug(f"‚úçÔ∏è –ó–∞–ø–∏—Å–∞–Ω –∫—É—Å–æ–∫ {chunk_index + 1} ({len(chunk_data)} –±–∞–π—Ç) –≤ {chunk_path}")
                
                # –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞
                actual_size = os.path.getsize(chunk_path)
                if actual_size == len(chunk_data):
                    logging.debug(f"‚úÖ –†–∞–∑–º–µ—Ä –∫—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {actual_size} –±–∞–π—Ç")
                else:
                    logging.error(f"üö® –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—É—Å–∫–∞! –û–∂–∏–¥–∞–ª–æ—Å—å {len(chunk_data)}, –ø–æ–ª—É—á–µ–Ω–æ {actual_size}")
                
                chunks.append(chunk_path)
                position += chunk_size
                chunk_number = chunk_index + 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logging.debug(f"üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Å–∫–∞ {chunk_number}/{estimated_total_chunks}")
                progress_pct = min(position / file_size * 100, 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 100%
                logging.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∞–π–ª–∞: {progress_pct:.1f}% - –ö—É—Å–æ–∫ {chunk_number}")
                chunk_index += 1
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        logging.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
        os.remove(file_path)
        chunk_count = chunk_index
        plural = "–∫—É—Å–æ–∫" if chunk_count == 1 else "–∫—É—Å–∫–æ–≤"
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω {file_path} –Ω–∞ {chunk_count} {plural}")
        logging.debug(f"üîç –û–±—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        logging.debug(f"üîç –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—É—Å–∫–æ–≤: {sum(os.path.getsize(c) for c in chunks)} –±–∞–π—Ç")
        return chunks

    def split_container(self, container_path: str, piece_size: int) -> List[str]:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –∫—É—Å–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        if not self.seed:
            logging.error("–ù–µ —É–∫–∞–∑–∞–Ω seed –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            return []
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        container_path = os.path.abspath(container_path)
        directory = os.path.dirname(container_path)
        if not directory:
            directory = '.'
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É—Å–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed-based —à–∞–±–ª–æ–Ω–∞
        if glob.glob(os.path.join(directory, f"{self.seed}-*")):
            logging.error(f"üö® –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Å–∫–∏ –¥–ª—è seed '{self.seed}'. –û—á–∏—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫—É—Å–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π seed.")
            return []
            
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(directory, exist_ok=True)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if not os.path.exists(container_path):
            logging.error(f"üö® –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {container_path}")
            return []
        
        try:
            chunks = self._split_file(container_path, 0, piece_size)
            logging.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {os.path.basename(container_path)} —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π")
            return chunks
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_path}: {str(e)}")
            return []

class ContainerReconstructor:
    def __init__(self, seed: str = None):
        self.seed = seed

    def _reconstruct_file(self, chunks: List[str], output_path: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –µ–≥–æ –∫—É—Å–∫–æ–≤"""
        logging.info(f"üîµ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {output_path}")
        logging.debug(f"–ö—É—Å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(chunks)}")
        
        try:
            total_written = 0
            with open(output_path, 'wb') as out_file:
                for i, chunk_path in enumerate(chunks):
                    logging.debug(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Å–∫–∞ {i+1}/{len(chunks)}: {chunk_path}")
                    
                    if not os.path.exists(chunk_path):
                        logging.error(f"üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—É—Å–æ–∫: {chunk_path}")
                        return False
                        
                    chunk_size = os.path.getsize(chunk_path)
                    logging.debug(f"üì¶ –†–∞–∑–º–µ—Ä –∫—É—Å–∫–∞: {chunk_size} –±–∞–π—Ç")
                    
                    with open(chunk_path, 'rb') as chunk_file:
                        chunk_data = chunk_file.read()
                        out_file.write(chunk_data)
                        total_written += len(chunk_data)
                        logging.debug(f"‚úçÔ∏è –ó–∞–ø–∏—Å–∞–Ω–æ {len(chunk_data)} –±–∞–π—Ç (–≤—Å–µ–≥–æ: {total_written}) –≤ –∫—É—Å–∫–µ {i+1}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                    current_size = os.path.getsize(output_path)
                    if current_size != total_written:
                        logging.error(f"üö® –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ –∫—É—Å–∫–∞ {i+1}! {current_size} vs {total_written}")
                        return False
                    
                    # –£–¥–∞–ª—è–µ–º –∫—É—Å–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    logging.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Å–∫–∞: {chunk_path}")
                    os.remove(chunk_path)
            
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {output_path} ({total_written} –±–∞–π—Ç)")
            return True
        except Exception as e:
            logging.error(f"üö® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {str(e)}")
            return False

    def restore_container(self, directory: str, output_path: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ –∫—É—Å–∫–æ–≤"""
        logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ {directory}")
        
        if not self.seed:
            logging.error("–ù–µ —É–∫–∞–∑–∞–Ω seed –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            return False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Å–∫–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        chunks = []
        for chunk in glob.glob(os.path.join(directory, f"{self.seed}-0-*.jpg")):
            try:
                parts = os.path.basename(chunk).split('-')
                subindex = int(parts[2])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º –∏ subindex –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                chunks.append({
                    "path": chunk,
                    "size": os.path.getsize(chunk),
                    "subindex": subindex
                })
                
            except (IndexError, ValueError) as e:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Å–∫–∞: {chunk} - {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Å–∫–∏ –ø–æ subindex –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏
        sorted_chunks = sorted(chunks, key=lambda x: x["subindex"])
        chunk_paths = [c["path"] for c in sorted_chunks]
        
        if not chunk_paths:
            logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫—É—Å–∫–∏ –¥–ª—è seed {self.seed} –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}")
            return False
        
        return self._reconstruct_file(chunk_paths, output_path) 